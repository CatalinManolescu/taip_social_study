<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
                http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <context:annotation-config/>
    <!--<context:component-scan base-package="org.springframework.social.facebook"/>
    <context:component-scan base-package="taip.social.api"/>-->

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="nullValue" value=""/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:application.properties</value>
            </list>
        </property>
    </bean>

    <bean id="applicationProperties"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="location" value="classpath:application.properties"/>
    </bean>


    <bean name="simpleDateFormat" class="java.text.SimpleDateFormat">
        <constructor-arg type="java.lang.String" value="yyyy/MM/dd"/>
    </bean>

    <!-- PERSISTENCE CONFIG - START -->
    <!-- Enable this only for testing if needed, otherwise use the JNDI config -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close" p:driverClassName="${jdbc.driverClassName}"
          p:url="${jdbc.url}" p:username="${jdbc.username}" p:password="${jdbc.password}"  />

    <!--<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:taip/jdbc/base"/>
    </bean>-->

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="persistenceUnitName" value="taip-social-core"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="${hibernate.show_sql}"/>
                <property name="generateDdl" value="${hibernate.generateDdl}"/>
                <property name="databasePlatform" value="${hibernate.dialect}"/>
            </bean>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
            </props>
        </property>
        <property name="loadTimeWeaver">
            <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
        </property>
    </bean>

    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" mode="proxy"/>

    <!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="transactionAnnotatedClass"
                      expression="@within(org.springframework.transaction.annotation.Transactional)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionAnnotatedClass"/>
    </aop:config>

    <!-- enabled validator for database objects -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

    <!-- PERSISTENCE CONFIG - END -->

    <!-- Auto logging -->
    <aop:aspectj-autoproxy />
    <bean id="logEntityControl" class="taip.commons.aop.LogEntityControlAspect"/>

    <!-- security -->
    <bean id="authenticationProvider" class="taip.social.api.security.UserPassAuthenticationProvider"/>
    <bean id="passwordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder">
        <constructor-arg value="taippass"/>
    </bean>

    <security:global-method-security
            secured-annotations="disabled"
            jsr250-annotations="enabled"
            pre-post-annotations="enabled">
    </security:global-method-security>

    <security:http use-expressions="true">
        <security:http-basic/>
    </security:http>

    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="authenticationProvider"/>
    </security:authentication-manager>



    <!-- CXF config  -->
    <import resource="classpath:META-INF/cxf/cxf.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>

    <!--<bean id="jacksonJaxbJsonProvider" class="com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider"/>-->

    <!-- services -->
    <!--<bean id="authorisationService" class="taip.social.api.rest.unsecured.AuthorisationService"/>

    <jaxrs:server id="cxfRootPath" address="/">
        <jaxrs:serviceBeans>
            <ref bean="authorisationService"/>
            &lt;!&ndash;<ref bean="facebookService"/>&ndash;&gt;
        </jaxrs:serviceBeans>
        <jaxrs:resourceComparator>
            <bean id="simpleResourceComparator" class="taip.social.api.comparators.SimpleResourceComparator"/>
        </jaxrs:resourceComparator>
        <jaxrs:providers>
            <ref bean="jacksonJaxbJsonProvider"/>
        </jaxrs:providers>
    </jaxrs:server>-->

</beans>
